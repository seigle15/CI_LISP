program ::= s-expr EOL

s-expr ::= quit
| number
| symbol
| f-expr
| ( let_section s_expr )

f-expr ::= ( func s-expr ) | ( func s-expr s-expr )

func ::= neg|abs|exp|sqrt|add|sub|mult|div|remainder|log|pow|max|min|exp2|cbrt|hypot

let_section ::= <empty> | ( let_list )

let_list ::= let let_elem | let_list let_elem

let_elem ::= ( symbol s_expr )

symbol ::= letter+

letter ::= [a-zA-Z]

number ::= int | double
int ::= [+|-] digit+
double ::= [+|-] digit+ . digit*
digit ::= 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9